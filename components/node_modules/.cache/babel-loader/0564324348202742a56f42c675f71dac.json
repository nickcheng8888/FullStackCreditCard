{"ast":null,"code":"import valid from \"card-validator\";\nimport { useAccordionToggle } from \"react-bootstrap\";\nimport Push from \"./Push\";\nimport generateCipher from \"./encrypt\";\nexport default function validateInfo(values, setValues) {\n  let errors = {}; // create a credit card object as part of card-validator package\n\n  let creditCard = valid.number(values.cardNumber);\n  creditCard.expirationDate = valid.expirationDate(values.cardExpiration); // assign values from the form\n\n  creditCard.cvv = valid.cvv(values.cardSecurityCode);\n  creditCard.cardholderName = valid.cardholderName(values.cardName);\n  errors.show = true;\n  errors.variant = \"danger\";\n  errors.message = \"An unknown error occured. Please try again later\";\n  errors.cname = false;\n  errors.cnumber = false;\n  errors.ccvv = false;\n  errors.cexp = false; //Card CVV expiration\n\n  if (values.cardSecurityCode === null || !values.cardSecurityCode.trim()) {\n    errors.message = \"Credit card CVC is not complete\";\n  } else if (creditCard.cvv.isValid) {\n    errors.ccvv = true;\n  } else {\n    errors.message = \"Credit card CVC is invalid\";\n  }\n\n  if (values.cardExpiration === null || !values.cardExpiration.trim()) {\n    errors.message = \"Credit card expiration date is not complete\";\n  } else if (creditCard.expirationDate.isValid) {\n    errors.cexp = true;\n  } else {\n    errors.message = \"Credit card expiration date is invalid\";\n  } //Card Number Verification\n\n\n  if (values.cardNumber === null || !values.cardNumber.trim()) {\n    errors.message = \"Credit card number is not complete\";\n  } else if (creditCard.isPotentiallyValid) {\n    errors.cnumber = true;\n    errors.message = \"Credit card number is valid\";\n  } else {\n    errors.message = \"Credit card number is invalid\";\n  } //Cardholder Name Verification\n\n\n  if (values.cardName === null || !values.cardName.trim()) {\n    errors.message = \"Cardholder name is not complete\";\n  } else if (creditCard.cardholderName.isValid) {\n    errors.cname = true;\n  } else {\n    errors.message = \"Cardholder name is invalid\";\n  }\n\n  if (values.userid === null || !values.cardName.trim()) {\n    errors.message = \"Please login\";\n  } else if (creditCard.cardholderName.isValid) {\n    errors.cname = true;\n  } else {\n    errors.message = \"Cardholder name is invalid\";\n  }\n\n  if (errors.cname && errors.cnumber && errors.cexp && errors.ccvv) {\n    errors.variant = \"success\";\n    errors.message = \"Storing credit card...\"; // const hash = generateCipher(values);\n    // console.log(hash.toString())\n\n    Push(hash.toString());\n  }\n\n  return errors;\n}","map":{"version":3,"sources":["/Users/nicholascheng/Downloads/node-express-firebase-main/components/src/validateCards/validateInfo.js"],"names":["valid","useAccordionToggle","Push","generateCipher","validateInfo","values","setValues","errors","creditCard","number","cardNumber","expirationDate","cardExpiration","cvv","cardSecurityCode","cardholderName","cardName","show","variant","message","cname","cnumber","ccvv","cexp","trim","isValid","isPotentiallyValid","userid","hash","toString"],"mappings":"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","sourcesContent":["import valid from \"card-validator\";\nimport { useAccordionToggle } from \"react-bootstrap\";\nimport Push from \"./Push\";\nimport generateCipher from \"./encrypt\";\n\nexport default function validateInfo(values, setValues) {\n  let errors = {};\n  // create a credit card object as part of card-validator package\n  let creditCard = valid.number(values.cardNumber);\n  creditCard.expirationDate = valid.expirationDate(values.cardExpiration);\n  // assign values from the form\n  creditCard.cvv = valid.cvv(values.cardSecurityCode);\n  creditCard.cardholderName = valid.cardholderName(values.cardName);\n\n\n  errors.show = true;\n  errors.variant = \"danger\";\n  errors.message = \"An unknown error occured. Please try again later\"\n  errors.cname = false;\n  errors.cnumber = false;\n  errors.ccvv = false;\n  errors.cexp = false;\n\n\n  //Card CVV expiration\n  if (values.cardSecurityCode === null || !values.cardSecurityCode.trim()) {\n    errors.message = \"Credit card CVC is not complete\";\n  } else if (creditCard.cvv.isValid) {\n    errors.ccvv = true;\n  } else {\n    errors.message = \"Credit card CVC is invalid\";\n  }\n\n  if (values.cardExpiration === null || !values.cardExpiration.trim()) {\n    errors.message = \"Credit card expiration date is not complete\";\n  } else if (creditCard.expirationDate.isValid) {\n    errors.cexp = true;\n  } else {\n    errors.message = \"Credit card expiration date is invalid\";\n  }\n\n  //Card Number Verification\n  if (values.cardNumber === null || !values.cardNumber.trim()) {\n    errors.message = \"Credit card number is not complete\";\n  } else \n  if (creditCard.isPotentiallyValid) {\n    errors.cnumber = true;\n    errors.message = \"Credit card number is valid\";\n\n  } else {\n    errors.message = \"Credit card number is invalid\";\n  }\n\n  //Cardholder Name Verification\n  if (values.cardName === null || !values.cardName.trim()) {\n    errors.message = \"Cardholder name is not complete\";\n  } else if (creditCard.cardholderName.isValid) {\n    errors.cname = true;\n  } else {\n    errors.message = \"Cardholder name is invalid\";\n  }\n\n  if (values.userid === null || !values.cardName.trim()) {\n    errors.message = \"Please login\";\n  } else if (creditCard.cardholderName.isValid) {\n    errors.cname = true;\n  } else {\n    errors.message = \"Cardholder name is invalid\";\n  }\n\n\n\n\n  if (\n    errors.cname &&\n    errors.cnumber &&\n    errors.cexp &&\n    errors.ccvv\n  ) {\n    errors.variant = \"success\";\n    errors.message = \"Storing credit card...\";\n    // const hash = generateCipher(values);\n    // console.log(hash.toString())\n    Push(hash.toString());\n  }\n\n  return errors;\n}\n"]},"metadata":{},"sourceType":"module"}